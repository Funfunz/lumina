---
import type { IComponentData, IPageData } from '../data/data'
import AstroRendererWrapper from './AstroRendererWrapper.astro'
import ReactComponentLoader from './ReactComponentLoader'
import ReactRenderer from './ReactRenderer'
import { astroComponents, reactComponents } from './components'

interface Props {
	data: IComponentData | IPageData
  edit?: boolean
}

const { data, edit } = Astro.props

const toRender = (data: IComponentData[]) => {
  if (!data) return []
  return data.map(
    (child) => {
      let Component = astroComponents[child.type]
      if (Component) {
        return {
          Component,
          framework: 'astro',
          data: child,
        }
      }

      Component = reactComponents[child.type]
      if (Component) {
        return {
          Component,
          framework: 'react',
          data: child,
        }
      }
      return
    }
  ).filter(e => e)
}

---
<div style="position: fixed; top: 0; left: 0"></div>
{data.children && (
  <ReactRenderer id={(data as IComponentData)?.id} client:load>
    {...toRender(data.children).map(
      ({Component, data, framework}) => {
        if (framework === 'react') {
          return (
            <slotter slot={'slot_' + data.id}>
              <ReactComponentLoader id={data.id} edit={edit} type={data.type} {...data.props} client:load>
                <AstroRendererWrapper data={data} edit={edit}/>
              </ReactComponentLoader>
            </slotter>
          )
        }
        return (
          <Component edit={edit} slot={'slot_' + data.id} {...data.props}>
            <AstroRendererWrapper data={data} edit={edit}/>
          </Component>
        )
      }
    )}
    </ReactRenderer>
)}
