---
import type { IComponentData, IPageData } from '../data/data'
import AstroRendererWrapper from './AstroRendererWrapper.astro'
import ReactComponentLoader from './ReactComponentLoader'
import { astroComponents, reactComponents } from './components'

interface Props {
	data: IComponentData | IPageData
  edit?: boolean
}

const { data, edit } = Astro.props;

const toRender = (data: IComponentData[]) => {
  if (!data) return []
  return data.map(
    (child) => {
      let Component = astroComponents[child.type]
      if (Component) {
        return {
          Component,
          framework: 'astro',
          data: child,
        }
      }

      Component = reactComponents[child.type]
      console.log(child.type)
      if (Component) {
        return {
          Component,
          framework: 'react',
          data: child,
        }
      }
      return
    }
  ).filter(e => e)
}

---
<div style="position: fixed; top: 0; left: 0"></div>
{data.children && toRender(data.children).map(
  ({Component, data, framework}) => {
    if (framework === 'react') {
      data.type === 'image' && console.log({id: data.id}, {type: data.type}, {props: data.props})
      return (
        <ReactComponentLoader id={data.id} edit={edit} type={data.type} {...data.props} client:load>
          <AstroRendererWrapper data={data} edit={edit}/>
        </ReactComponentLoader>
      )
    }
    return (
      <Component edit={edit} {...data.props}>
        <AstroRendererWrapper data={data} edit={edit}/>
      </Component>
    )
  }
)}